knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tseries)
library(forecast)
library(stats)
library(stats4)
library(TSA)
library(timeSeries)
library(fUnitRoots)
library(fBasics)
library(tseries)
library(timsac)
library(TTR)
library(strucchange)
library(tis)
library(zoo)
library(gridExtra)
install
install.packages("gridExtra")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tseries)
library(forecast)
library(stats)
library(stats4)
library(TSA)
library(timeSeries)
library(fUnitRoots)
library(fBasics)
library(tseries)
library(timsac)
library(TTR)
library(strucchange)
library(tis)
library(zoo)
library(gridExtra)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tseries)
library(forecast)
library(stats)
library(stats4)
library(TSA)
library(timeSeries)
library(fUnitRoots)
library(fBasics)
library(tseries)
library(timsac)
library(TTR)
library(strucchange)
library(tis)
library(zoo)
library(gridExtra)
library(ggplot2)
# import data
snbr = get.hist.quote("SNBR", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
tup = get.hist.quote("TUP", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
sp500 = get.hist.quote("^gspc", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
# there are no NA values
cat("Number of NA values in SNBR series:",sum(is.na(snbr)),"\n")
cat("Number of NA values in TUP series:",sum(is.na(tup)),"\n")
cat("Number of NA values in S&P 500 series:",sum(is.na(sp500)))
# create data frame in case we may need it later
df = data.frame(merge(snbr,tup,sp500))
df <- tibble::rownames_to_column(df,"dates")
df$dates<-as.Date(df$dates,"%Y-%m-%d")
# check
head(df)
# import data
snbr = get.hist.quote("SNBR", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
tup = get.hist.quote("TUP", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
sp500 = get.hist.quote("^gspc", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
# there are no NA values
cat("Number of NA values in SNBR series:",sum(is.na(snbr)),"\n")
cat("Number of NA values in TUP series:",sum(is.na(tup)),"\n")
cat("Number of NA values in S&P 500 series:",sum(is.na(sp500)))
# create data frame in case we may need it later
df = data.frame(merge(snbr,tup,sp500))
df <- tibble::rownames_to_column(df,"dates")
df$dates<-as.Date(df$dates,"%Y-%m-%d")
# check
head(df)
library(glue)
tsplot <- function(y,series_name) {
#################################
# Plot the original time series
# A histogram of the series
# ACF and PACF plots
#################################
ax1 = autoplot.zoo(y, main = sprintf("%s Closing Price",series_name),
ylab = "Price (USD)",xlab = "Time")
`Closing Price` = y
ax2 = gghistogram(`Closing Price`)
ax3 = ggAcf(y,
main = glue('{series_name} Sample Autocorrelations'),
xlab="Displacement",lag.max = 48)
ax4 = ggPacf(y,
main = glue('{series_name} Sample Partial Autocorrelations'),
xlab="Displacement",lag.max = 48)
grid.arrange(ax1, ax2,ax3,ax4, ncol=2,nrow = 2)
}
# time-series, histogram, ACF and PACF plots
tsplot(snbr,"SNBR")
tsplot(tup,"TUP")
tsplot(sp500,"S&P 500")
library(glue)
tsplot <- function(y,series_name) {
#################################
# Plot the original time series
# A histogram of the series
# ACF and PACF plots
#################################
ax1 = autoplot.zoo(y, main = sprintf("%s Closing Price",series_name),
ylab = "Price (USD)",xlab = "Time")
`Closing Price` = y
ax2 = gghistogram(`Closing Price`)
ax3 = ggAcf(y,
main = glue('{series_name} Sample Autocorrelations'),
xlab="Displacement",lag.max = 48)
ax4 = ggPacf(y,
main = glue('{series_name} Sample Partial Autocorrelations'),
xlab="Displacement",lag.max = 48)
grid.arrange(ax1, ax2,ax3,ax4, ncol=2,nrow = 2)
}
# time-series, histogram, ACF and PACF plots
tsplot(snbr,"SNBR")
tsplot(tup,"TUP")
tsplot(sp500,"S&P 500")
tup = get.hist.quote(
"TUP",
start = "2010-12-20",
end = "2022-02-08",
quote = c("Close"),
provider = "yahoo",
compression = 'w'
)
# import data
snbr = get.hist.quote(
"SNBR",
start = "2010-12-20",
end = "2022-02-08",
quote = c("Close"),
provider = "yahoo",
compression = 'w'
)
tup = get.hist.quote(
"TUP",
start = "2010-12-20",
end = "2022-02-08",
quote = c("Close"),
provider = "yahoo",
compression = 'w'
)
sp500 = get.hist.quote(
"^gspc",
start = "2010-12-20",
end = "2022-02-08",
quote = c("Close"),
provider = "yahoo",
compression = 'w'
)
# there are no NA values
cat("Number of NA values in SNBR series:", sum(is.na(snbr)), "\n")
cat("Number of NA values in TUP series:", sum(is.na(tup)), "\n")
cat("Number of NA values in S&P 500 series:", sum(is.na(sp500)))
# create data frame in case we may need it later
df = data.frame(merge(snbr, tup, sp500))
df <- tibble::rownames_to_column(df, "dates")
df$dates <- as.Date(df$dates, "%Y-%m-%d")
# check
head(df)
library(glue)
tsplot <- function(y,series_name) {
#################################
# Plot the original time series
# A histogram of the series
# ACF and PACF plots
#################################
ax1 = autoplot.zoo(y, main = sprintf("%s Closing Price",series_name),
ylab = "Price (USD)",xlab = "Time")
`Closing Price` = y
ax2 = gghistogram(`Closing Price`)
ax3 = ggAcf(y,
main = glue('{series_name} Sample Autocorrelations'),
xlab="Displacement",lag.max = 48)
ax4 = ggPacf(y,
main = glue('{series_name} Sample Partial Autocorrelations'),
xlab="Displacement",lag.max = 48)
grid.arrange(ax1, ax2,ax3,ax4, ncol=2,nrow = 2)
}
# time-series, histogram, ACF and PACF plots
tsplot(snbr,"SNBR")
# time-series, histogram, ACF and PACF plots
tsplot(snbr, "SNBR")
tsplot(tup, "TUP")
tsplot(sp500, "S&P 500")
tsplot(tup, "TUP")
snbr_ts = ts(snbr$Close,
start = c(2010, 12, 20),
frequency = 52)
tup_ts = ts(tup$Close,
start = c(2010, 12, 20),
frequency = 52)
sp500_ts = ts(sp500$Close,
start = c(2010, 12, 20),
frequency = 52)
autoplot(stl(snbr_ts, s.window = "periodic", robust = TRUE),
main = "SNBR: STL Decomposition")
autoplot(stl(tup_ts, s.window = "periodic", robust = TRUE),
main = "TUP STL Decomposition")
autoplot(stl(sp500_ts, s.window = "periodic", robust = TRUE),
main = "S&P 500 STL Decomposition")
autoplot(stl(snbr_ts, s.window = "periodic", robust = TRUE),
main = "SNBR: STL Decomposition")
autoplot(stl(tup_ts, s.window = "periodic", robust = TRUE),
main = "TUP STL Decomposition")
autoplot(stl(sp500_ts, s.window = "periodic", robust = TRUE),
main = "S&P 500 STL Decomposition")
m1 <- auto.arima(snbr_ts)
summary(m1)
ggtsdisplay(resid(m1))
m2 <- auto.arima(tup_ts)
m2 <- auto.arima(tup_ts)
tup_ts = ts(tup$Close,
start = c(2010, 12, 20),
frequency = 52)
m2 <- auto.arima(tup_ts)
ggtsdisplay(resid(m2))
m3 <- auto.arima(sp500_ts)
summary(m3)
ggtsdisplay(resid(m3))
plot_resid_fit <- function(x, y) {
data = data.frame(x = x, y = y)
p <- ggplot(data, aes(x =  x, y = y)) +
geom_smooth(
method = "lm",
se = T,
col = "red",
formula = y ~ x,
show.legend = T
) +
geom_point(alpha = 0.5,
size = 2,
col = "black") +
xlab("Fit") + ylab("Residuals") +
ggtitle("Residuals vs Fit")
return(p)
}
plot_resid_fit(fitted(m1), resid(m1))
plot_resid_fit <- function(x, y) {
data = data.frame(x = x, y = y)
p <- ggplot(data, aes(x =  x, y = y)) +
geom_smooth(
method = "lm",
se = T,
col = "red",
formula = y ~ x,
show.legend = T
) +
geom_point(alpha = 0.5,
size = 2,
col = "black") +
xlab("Fit") + ylab("Residuals") +
ggtitle("Residuals vs Fit")
return(p)
}
plot_resid_fit(fitted(m1), resid(m1))
plot_resid_fit <- function(x, y) {
data = data.frame(x = x, y = y)
p <- ggplot(data, aes(x =  x, y = y)) +
geom_smooth(
method = "lm",
se = T,
col = "red",
formula = y ~ x,
show.legend = T
) +
geom_point(alpha = 0.5,
size = 2,
col = "black") +
xlab("Fit") + ylab("Residuals") +
ggtitle("Residuals vs Fit")
return(p)
}
plot_resid_fit(fitted(m1), resid(m1))
plot_resid_fit <- function(x, y) {
data = data.frame(x = x, y = y)
p <- ggplot(data, aes(x =  x, y = y)) +
geom_smooth(
method = "lm",
se = T,
col = "red",
formula = y ~ x,
show.legend = T
) +
geom_point(alpha = 0.5,
size = 2,
col = "black") +
xlab("Fit") + ylab("Residuals") +
ggtitle("Residuals vs Fit")
return(p)
}
plot_resid_fit(fitted(m1), resid(m1))
m2 <- auto.arima(tup_ts)
plot_resid_fit(fitted(m2),resid(m2))
plot_resid_fit(fitted(m3),resid(m3))
plot(efp(resid(m1) ~ 1, type = "Rec-CUSUM"))
plot(efp(resid(m2) ~ 1, type = "Rec-CUSUM"))
plot(efp(resid(m3) ~ 1, type = "Rec-CUSUM"))
ggtsdisplay(resid(m2))
m2 <- auto.arima(tup_ts)
m2 <- Arima(
tup_ts,
order = c(2, 1, 0),
include.drift = TRUE,
seasonal = list(order = c(1, 0, 0))
)
# m2 <- auto.arima(tup_ts)
summary(m2)
ggtsdisplay(resid(m2))
plot_resid_fit(fitted(m2),resid(m2))
plot(efp(resid(m1) ~ 1, type = "Rec-CUSUM"))
efp(resid(m1) ~ 1, type = "Rec-CUSUM"
efp(resid(m1) ~ 1, type = "Rec-CUSUM")
efp(resid(m1) ~ 1, type = "Rec-CUSUM")
ggplot(efp(resid(m1) ~ 1, type = "Rec-CUSUM"))
ggtsdisplay(efp(resid(m1) ~ 1, type = "Rec-CUSUM"))
plot(efp(resid(m1) ~ 1, type = "Rec-CUSUM"))
plot(efp(resid(m2) ~ 1, type = "Rec-CUSUM"))
plot(efp(resid(m3) ~ 1, type = "Rec-CUSUM"))
plot(efp(resid(m1) ~ 1, type = "Rec-CUSUM"))
ggtsdisplay(resid(m3))
plot(forecast(m1, h = 12), shadecols = "oldstyle")
plot(forecast(m1, h = 12))
plot(forecast(m1, h = 12), c("#596DD5", "#D5DBFF"))
plot(forecast(m1, h = 12), c("#596DD5", "#D5DBFF"))
plot(forecast(m1, h = 12), shadecols = c("#596DD5", "#D5DBFF"))
autoplot(forecast(m1, h = 12), shadecols = c("#596DD5", "#D5DBFF"))
autoplot(forecast(m1, h = 12))
autoplot(forecast(m1, h = 12))
grid()
autoplot(forecast(m1, h = 12))
f1 <- forecast(m1, h = 12)
autoplot(forecast(m1, h = 12))
f1$mean
print(f1)
autoplot(forecast(m1, h = 12))
print(forecast(m1, h = 12))
autoplot(forecast(m2, h = 12))
print(forecast(m2, h = 12))
autoplot(forecast(m3, h = 12))
print(forecast(m3, h = 12))
hw1 <- HoltWinters(male_ts)
hw1 <- HoltWinters(snbr_ts)
hw1 <- HoltWinters(snbr_ts)
hw1 <- HoltWinters(snbr_ts)
hw2 <- HoltWinters(tup_ts)
hw3 <- HoltWinters(sp500_ts)
hw1 <- HoltWinters(snbr_ts)
hw2 <- HoltWinters(tup_ts)
hw3 <- HoltWinters(sp500_ts)
hw1 <- HoltWinters(snbr_ts)
hw2 <- HoltWinters(tup_ts)
hw3 <- HoltWinters(sp500_ts)
ets1 <- ets(snbr_ts)
ets2 <- ets(tup_ts)
ets3 <- ets(sp500_ts)
summary(hw1)
hw1 <- HoltWinters(snbr_ts)
hw2 <- HoltWinters(tup_ts)
hw3 <- HoltWinters(sp500_ts)
ets1 <- ets(snbr_ts)
ets2 <- ets(tup_ts)
ets3 <- ets(sp500_ts)
summary(hw1)
summary(ets1)
arima_f1 <- forecast(m1, h = 12))
arima_f1 <- forecast(m1, h = 12)
arima_f2 <- forecast(m2, h = 12)
arima_f3 <- forecast(m3, h = 12)
summary(arima_f1)
arima_f1$model$arma
arima_f1$model
arima_f1$fitted
arima_f1$method
arima_f1$model
arima_f1$level
arima_f1$
summary(arima_f1)
arima_f1$x
arima_f1$residuals
arima_f1
arima_f1$summary
summary(arima_f1)
str(summary(arima_f1))
summary(arima_f1)
coefficients(arima_f1)
coefficients(summary(arima_f1))
hw1 <- HoltWinters(snbr_ts)
hw1 <- HoltWinters(snbr_ts)
ets1 <- ets(snbr_ts)
ar_f1 <- forecast(m1, h = 12)
hw_f1 <- forecast(hw1, h = 12)
ets_f1 <- forecast(ets1, h = 12)
hw1 <- HoltWinters(snbr_ts)
ets1 <- ets(snbr_ts)
ari_f1 <- forecast(m1, h = 12)
hw_f1 <- forecast(hw1, h = 12)
ets_f1 <- forecast(ets1, h = 12)
summary(ari_f1)
summary(hw_f1)
summary(ets_f1)
summary(ari_f1)
summary(hw_f1)
summary(ets_f1)
print(summary(ari_f1))
hw1 <- HoltWinters(snbr_ts)
ets1 <- ets(snbr_ts)
ari_f1 <- forecast(m1, h = 12)
hw_f1 <- forecast(hw1, h = 12)
ets_f1 <- forecast(ets1, h = 12)
summary(ari_f1)
summary(hw_f1)
summary(ets_f1)
plot(ari_f1)
plot(ari_f1)
plot(hw_f1)
plot(ets_f1)
summary(ari_f1)
summary(hw_f1)
summary(ets_f1)
hw3 <- HoltWinters(sp500_ts)
ets3 <- ets(sp500_ts)
ari_f3 <- forecast(m3, h = 12)
hw_f3 <- forecast(hw3, h = 12)
ets_f3 <- forecast(ets3, h = 12)
plot(ari_f3)
plot(hw_f3)
plot(ets_f3)
summary(ari_f3)
summary(hw_f3)
summary(ets_f3)
