checkresiduals(fc)
fc <- stlf(bricksq, s.window='periodic', method='naive', lambda=0.25, robust=TRUE)
autoplot(fc)
checkresiduals(fc)
bricks1 <- window(bricksq, end = c(1987,4))
fc1 <- stlf(bricks1, s.window='periodic', method='naive', lambda=0.25)
fc2 <- snaive(bricks1)
accuracy(fc1, bricksq)
accuracy(fc1, bricksq)
accuracy(fc2, bricksq)
fc1 <- stlf(data, s.window='periodic', method='naive', lambda = 0.25)
rm(list=ls(all=TRUE))
library(fpp2)
data=writing
fc1 <- stlf(data, s.window='periodic', method='naive', lambda = 0.25)
autoplot(fc1)
rm(list=ls(all=TRUE))
library(fpp2)
data=writing
fc1 <- stlf(data, s.window='periodic', method='naive', lambda = 0.25)
fc2 <- stlf(data, s.window='periodic', method='rwdrift', lambda = 0.25)
autoplot(fc1)
autoplot(fc2)
accuracy(fc1,data)
rm(list=ls(all=TRUE))
library(fpp2)
data=writing
fc1 <- stlf(data, s.window='periodic', method='naive')
fc2 <- stlf(data, s.window='periodic', method='rwdrift')
autoplot(fc1)
autoplot(fc2)
rm(list=ls(all=TRUE))
library(fpp2)
data=fancy
plot(fancy)
fc <- stlf(data, s.window='periodic',method='rwdrift')
autoplot(fc)
fc <- stlf(data, s.window='periodic',method='rwdrift', lambda =0.2)
autoplot(fc)
BoxCox.lambda(fancy)
rm(list=ls(all=TRUE))
setwd("~/Desktop/Econ 144")
#Real Personal Consumption Expenditures
rpce=read.csv("DPCCRAM1M225NBEA.csv",header=T,dec=".",sep=",")
rpce_ts=ts(rpce[,2],start=1959,freq=12)
lrpce_ts = log(rpce_ts+13)
r_pce=diff(lrpce_ts)
rdpi=read.csv("DSPIC96.csv",header=T,dec=".",sep=",")
rm(list=ls(all=TRUE))
setwd("~/Desktop/Econ 144")
rpce=read.csv("DPCCRAM1M225NBEA.csv",header=T,dec=".",sep=",")
rdpi=read.csv("DSPIC96.csv",header=T,dec=".",sep=",")
#Real Personal Consumption Expenditures
rpce_ts=ts(rpce[,2],start=1959,freq=12)
lrpce_ts = log(rpce_ts+13)
r_pce=diff(lrpce_ts)
#Real Disposable Income
rdpi=rdpi[-c(1),] #make equal number of obs as rpce
rdpi_ts=ts(rdpi[,2],start=1959,freq=12)
lrdpi_ts <- log(rdpi_ts)
r_dpi<-diff(rdpi_ts)
plot(r_pce)
plot(r_dpi)
plot(r_pce)
plot(r_dpi)
m1=lm(r_dpi~r_pce)
m1=lm(r_pce~r_dpi)
summary(m1)
m2=dynlm(r_pce~r_dpi + L(r_dpi,1))
summary(m2)
rm(list=ls(all=TRUE))
setwd("~/Desktop/Econ 144")
GDP=read.csv("q3.5.csv",header=T,dec=".",sep=",")
GDP_ts=ts(GDP[,2],start=2001,freq=4)
plot(GDP_ts,xlab="Year", ylab="Quarterly Nominal GDP")
gdpex5$growth <- c(NA, 100 * diff(GDP)/GDP[-1])
GDP <- c(NA, 100 * diff(GDP)/GDP[-1])
lag1_GDP=stats::lag(GDP_ts,1)
GDP_growth_ts=100*(GDP_ts-lag1_GDP)/(lag1_GDP)
plot(GDP_growth_ts,xlab="year",ylab="Quarterly Nominal GDP growth")
getSymbols("Ë†GSPC", from = "2006-01-02")
rm(list=ls(all=TRUE))
setwd("~/Desktop/Econ 144")
SP500=read.csv("SP500.csv",header=T,dec=".",sep=",",na.strings=c("."))
SP500=na.omit(SP500) #remove NAs to be able to take log
SP500_ts=ts(SP500[,2],start=2006,freq=252)
SP500_log_ts=log(SP500_ts)
lag1_SP500_log=stats::lag(SP500_log_ts,1)
dailyreturn=SP500_log_ts-lag1_SP500_log
plot(dailyreturn)
rm(list=ls(all=TRUE))
library(fpp3)
data(aus_retail)
AUS=aus_retail[aus_retail$`Series ID`=='A3349849A',]
AUS_ts=ts(AUS[,5],start=1982,freq=12)
plot(AUS_ts,xlab="year",ylab="Monthly Turnover")
#Decompose using X-11
x11_dcmp <- AUS %>%
model(x11 = X_13ARIMA_SEATS(Turnover ~ x11())) %>%
components()
autoplot(x11_dcmp) +
labs(title =
"Decomposition of Australian Cafe Worker Turnover using X-11.")
rm(list=ls(all=TRUE))
setwd("~/Desktop/Econ 144")
data=read.table("liquor.dat")
data_ts<-ts(data[,1],start=1968.1,freq=12)
t<-seq(1968.1,1996.1,length=length(data_ts))
lgdata<-log(data_ts)
plot(lgdata)
par(mfrow=c(2,1))
plot(data_ts,xlab='Time', ylab="Sales", lwd=2)
plot(lgdata,xlab='Time', ylab="Log (Sales)", lwd=2)
plot(stl(lgdata,s.window="periodic"))
t2<-t^2
m1=lm(lgdata~t+t2)
plot(lgdata, ylab="Log(Sales)", xlab="Time (Year)", lwd=2, col='skyblue3', xlim=c(1968,1995))
lines(t,m1$fit,col="red",lwd="2")
plot(t,m1$res, ylab="Residuals",type='l',xlab="Time")
par(mfrow=c(2,1))
acf(m1$residuals,type="correlation")
pacf(m1$residuals) #this looks like an S-AR(1) model with s=12
rm(list=ls(all=TRUE))
library(foreign)
library(tis)
library(FNN)
library(fpp3)
library(tseries)
library(forecast)
library(fma)
library(tidyr)
library(tinytex)
rm(list=ls(all=TRUE))
library(fpp2)
data = debitcards
tsdisplay(data)
dcmp_data <- decompose(data, type = 'multiplicative')
dcmp_data <- decompose(data, type = 'multiplicative')
autoplot(dcmp_data)
dcmp_data1 <- decompose(data, type = 'additive')
autoplot(dcmp_data1)
dcmp_data <- decompose(data, type = 'multiplicative')
autoplot(dcmp_data)
dcmp_data1 <- decompose(data, type = 'additive')
autoplot(dcmp_data1)
dcmp_data <- decompose(data, type = 'multiplicative')
autoplot(dcmp_data)
detrend_data <- data / dcmp_data$trend
detrend_seasadj_data <- detrend_data / dcmp_data$seasonal
autoplot(detrend_seasadj_data)
dcmp_data <- decompose(data, type = 'multiplicative')
autoplot(dcmp_data)
dcmp_data <- decompose(data, type = 'multiplicative')
autoplot(dcmp_data)
#Remove trend and seasonality
detrend_data <- data / dcmp_data$trend
detrend_seasadj_data <- detrend_data / dcmp_data$seasonal
tsdisplay(detrend_seasadj_data)
fit <- auto.arima(detrend_seasadj_data)
summary(fit)
dcmp_data <- decompose(data, type = 'multiplicative')
autoplot(dcmp_data)
#Remove trend and seasonality
detrend_data <- data / dcmp_data$trend
detrend_seasadj_data <- detrend_data / dcmp_data$seasonal
tsdisplay(detrend_seasadj_data)
tsdisplay(data)
fit_full <- auto.arima(data)
summary(fit_full)
tsdispaly(fit_full$residuals)
tsdisplay(fit_full$residuals)
fit_full <- auto.arima(data)
summary(fit_full)
rm(list=ls(all=TRUE))
library(fpp2)
data = debitcards
#Plot series, ACF, and PACF
tsdisplay(data)
dcmp_data <- decompose(data, type = 'multiplicative')
autoplot(dcmp_data)
#Remove trend and seasonality
detrend_data <- data / dcmp_data$trend
detrend_seasadj_data <- detrend_data / dcmp_data$seasonal
tsdisplay(detrend_seasadj_data)
fit_cycles <- auto.arima(detrend_seasadj_data)
summary(fit_cycles)
plot(forecast(fit_cycles,n.ahead=10))
fit_cycles <- auto.arima(detrend_seasadj_data)
summary(fit_cycles)
plot(forecast(fit_cycles,n.ahead=10))
fit_full <- auto.arima(data)
summary(fit_full)
plot(forecast(fit_cycles,n.ahead=10))
model_full <- Arima(data, order=c(1,1,0), include.drift=TRUE, seasonal=list(order=c(0,1,1)))
plot(forecast(model_full, n.ahead=10))
tsdisplay(model_full$residuals)
model_full <- Arima(data, order=c(3,1,0), include.drift=TRUE, seasonal=list(order=c(0,1,1)))
plot(forecast(model_full, n.ahead=10))
tsdisplay(model_full$residuals)
library(strucchange)
y=recresid(model_full$resid~1)
plot(y)
plot(efp(model_full$residuals~1), type="Rec-CUSUM")
plot(efp(model_full$residuals~1), type= 'Rec-CUSUM')
plot(efp(model_full$residuals~1),type="Rec-CUSUM")
library(strucchange)
y=recresid(model_full$resid~1)
plot(y)
rm(list=ls(all=TRUE))
library(fma)
plot(hsales)
tsdisplay(hsales)
m1 <- tslm(hsales~trend+season)
summary(m1)
rm(list=ls(all=TRUE))
library(fma)
plot(hsales)
data=hsales
plot(hsales)
lines(m1$fitted.values, col = "skyblue")
rm(list=ls(all=TRUE))
library(fma)
data=hsales
plot(hsales)
tsdisplay(hsales)
#Use TSLM to fit linear trend with seasonal dummies
m1 <- tslm(hsales~trend+season)
summary(m1)
plot(hsales)
lines(m1$fitted.values, col = "skyblue")
#Show plot of the fit
plot(hsales)
lines(m1$fitted.values, col = "indianred3")
plot(m1$coef, type = 'l', ylab = 'Seasonal Factors', xlab = "Season",
lwd = 2, main = "Plot of Seasonal Factors")
plot(forecast(m1, n.ahead=24), main = "Model: Forecast Trend + Seasonality")
lines(fit$fitted.values, col = "red")
plot(forecast(m1, n.ahead=24), main = "Model: Forecast Trend + Seasonality")
lines(m1$fitted.values, col = "red")
plot(forecast(m1, n.ahead=24), main = "Model: Forecast Trend + Seasonality")
lines(m1$fitted.values, col = "indianred3")
plot(hsales)
lines(m1$fitted.values, col = "indianred3")
#Plot seasonal factors
plot(m1$coef, type = 'l', ylab = 'Seasonal Factors', xlab = "Season",
lwd = 2, main = "Plot of Seasonal Factors")
rm(list=ls(all=TRUE))
library(fma)
data=hsales
plot(hsales)
tsdisplay(hsales)
#Use TSLM to fit linear trend with seasonal dummies
m1 <- tslm(hsales~ 0 + trend+season)
summary(m1)
rm(list=ls(all=TRUE))
library(fma)
data=hsales
plot(hsales)
tsdisplay(hsales)
#Use TSLM to fit linear trend with seasonal dummies
m1 <- tslm(hsales~ 0 + trend+season)
summary(m1)
plot(hsales)
lines(m1$fitted.values, col = "indianred3")
plot(m1$coef, type = 'l', ylab = 'Seasonal Factors', xlab = "Season",
lwd = 2, main = "Plot of Seasonal Factors")
plot(forecast(m1, n.ahead=24), main = "Model: Forecast Trend + Seasonality")
lines(m1$fitted.values, col = "indianred3")
plot(forecast(m1, n.ahead=24), main = "Model: Forecast Trend + Seasonality")
lines(m1$fitted.values, col = "indianred3")
ar.sim=arima.sim(model=list(ar=c(0.25)),n=5000)
forcast(ar.sim,n.ahead=10)
pred<-predict(ar.sim,n.ahead=10)
fit<- auto.arima(ar.sim)
pred<-predict(fit,n.ahead=10)
View(pred)
ar.sim=arima.sim(model=list(ar=c(0.25)),n=5000)
fit<- auto.arima(ar.sim)
pred<-predict(fit,n.ahead=10)
pred
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tseries)
library(forecast)
library(stats)
library(stats4)
library(TSA)
library(timeSeries)
library(fUnitRoots)
library(fBasics)
library(tseries)
library(timsac)
library(TTR)
library(strucchange)
library(tis)
library(zoo)
library(gridExtra)
library(ggplot2)
library(vars)
# import data
snbr = get.hist.quote("SNBR", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
tup = get.hist.quote("TUP", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
sp500 = get.hist.quote("^gspc", start = "2010-12-20", end = "2022-02-08",
quote=c("Close"),provider = "yahoo",
compression = 'w')
# there are no NA values
cat("Number of NA values in SNBR series:",sum(is.na(snbr)),"\n")
cat("Number of NA values in TUP series:",sum(is.na(tup)),"\n")
cat("Number of NA values in S&P 500 series:",sum(is.na(sp500)))
# create data frame in case we may need it later
df = data.frame(merge(snbr,tup,sp500))
df <- tibble::rownames_to_column(df,"dates")
df$dates<-as.Date(df$dates,"%Y-%m-%d")
# check
head(df)
library(glue)
tsplot <- function(y,series_name) {
#################################
# Plot the original time series
# A histogram of the series
# ACF and PACF plots
#################################
ax1 = autoplot.zoo(y, main = sprintf("%s Closing Price",series_name),
ylab = "Price (USD)",xlab = "Time")
`Closing Price` = y
ax2 = gghistogram(`Closing Price`)
ax3 = ggAcf(y,
main = glue('{series_name} Sample Autocorrelations'),
xlab="Displacement",lag.max = 48)
ax4 = ggPacf(y,
main = glue('{series_name} Sample Partial Autocorrelations'),
xlab="Displacement",lag.max = 48)
grid.arrange(ax1, ax2,ax3,ax4, ncol=2,nrow = 2)
}
# time-series, histogram, ACF and PACF plots
tsplot(snbr,"SNBR")
tsplot(tup,"TUP")
tsplot(sp500,"S&P 500")
# create the time series objects of the closing prices
# set frequency = 52 (roughly 52 weeks in a year)
snbr_ts = ts(snbr$Close, start = c(2010,12,20),frequency = 52)
tup_ts = ts(tup$Close, start = c(2010,12,20),frequency = 52)
sp500_ts = ts(sp500$Close, start = c(2010,12,20),frequency = 52)
autoplot(stl(snbr_ts,s.window = "periodic",robust=TRUE),
main = "SNBR: STL Decomposition")
autoplot(stl(tup_ts,s.window = "periodic",robust=TRUE),
main = "TUP STL Decomposition")
autoplot(stl(sp500_ts,s.window = "periodic",robust=TRUE),
main = "S&P 500 STL Decomposition")
ggtsdisplay(snbr_ts,
main = "SNBR Price",
ylab = "Price ($)")
ggtsdisplay(diff(snbr_ts),
main = "SNBR Price",
ylab = "Price ($)")
m1 = Arima(snbr_ts,order = c(2,1,2),
seasonal=list(order=c(1,0,1)),
method = "CSS")
ggtsdisplay(resid(m1),
main = "SNBR Model Residuals",
ylab = "$")
ggtsdisplay(tup_ts,
main = "TUP Price",
ylab = "Price ($)")
ggtsdisplay(diff(tup_ts),
main = "TUP Price",
ylab = "Price ($)")
m2 <- Arima(tup_ts,order = c(2,1,2))
ggtsdisplay(resid(m2),
main = "TUP Model Residuals",
ylab = "$")
ggtsdisplay(sp500_ts,
main = "TUP Price",
ylab = "Price ($)")
ggtsdisplay(diff(sp500_ts),
main = "TUP Price",
ylab = "Price ($)")
m3 <- Arima(sp500_ts,order = c(5,1,4))
ggtsdisplay(resid(m3),
main = "S&P 500 Model Residuals",
ylab = "$")
library(ggplot2)
plot_resid_fit <- function(x,y,title) {
data = data.frame(x = x, y = y)
p <- ggplot(data, aes(x =  x, y = y)) +
geom_smooth(method = "lm", se=T,
col = "red",
formula = y ~ x,
show.legend = T) +
geom_point(alpha = 0.5,size = 2,
col = "black") +
xlab("Fit") + ylab("Residuals") +
ggtitle(glue("{title} Residuals vs Fit"))
return(p)
}
plot_resid_fit(fitted(m1),resid(m1),"SNBR")
plot_resid_fit(fitted(m2),resid(m2),"TUP")
plot_resid_fit(fitted(m3),resid(m3),"S&P 500")
plot(efp(m1$res ~ 1, type = "Rec-CUSUM"))
plot(efp(m2$res ~ 1, type = "Rec-CUSUM"))
plot(efp(m3$res ~ 1, type = "Rec-CUSUM"))
summary(m1)
summary(m2)
summary(m3)
autoplot(snbr_ts) +
autolayer(forecast(m1, h = 12)) +
xlab("Year") + ylab("$ Dollars") +
ggtitle("Forecast for SNBR")
autoplot(tup_ts) +
autolayer(forecast(m2, h = 12)) +
xlab("Year") + ylab("$ Dollars") +
ggtitle("Forecast for TUP")
autoplot(sp500_ts) +
autolayer(forecast(m3, h = 12)) +
xlab("Year") + ylab("$ Dollars") +
ggtitle("Forecast for TUP")
snbr_train <- window(snbr_ts, end = c(2021, 9))
m1 <- Arima(snbr_train, order = c(2, 1, 2), seasonal = list(order = c(1, 0, 1)), method = "CSS")
arima1 <- auto.arima(snbr_train)
hw1 <- HoltWinters(snbr_train)
ets1 <- ets(snbr_train)
m_f1 <- forecast(m1, h = 12)
arima_f1 <- forecast(arima1, h = 12)
hw_f1 <- forecast(hw1, h = 12)
ets_f1 <- forecast(ets1, h = 12)
autoplot(snbr_ts) +
autolayer(m_f1, series="ARIMA", PI=FALSE) +
autolayer(arima_f1, series="AUTO.ARIMA", PI=FALSE) +
autolayer(hw_f1, series="HW", PI=FALSE) +
autolayer(ets_f1, series="ETS", PI=FALSE) +
xlab("Year") + ylab("$ Dollars") +
ggtitle("Forecasts for SNBR")
c(ARIMA = accuracy(m_f1, snbr_ts)["Test set","MAPE"],
AUTO.ARIMA = accuracy(arima_f1, snbr_ts)["Test set","MAPE"],
HW = accuracy(hw_f1, snbr_ts)["Test set","MAPE"],
EST = accuracy(ets_f1, snbr_ts)["Test set","MAPE"])
tup_train <- window(tup_ts, end = c(2021, 9))
m2 <-  Arima(tup_train, order = c(2, 1, 2))
arima2 <- auto.arima(tup_train)
hw2 <- HoltWinters(tup_train)
ets2 <- ets(tup_train)
m_f2 <- forecast(m2, h = 12)
arima_f2 <- forecast(arima2, h = 12)
hw_f2 <- forecast(hw2, h = 12)
ets_f2 <- forecast(ets2, h = 12)
autoplot(tup_ts) +
autolayer(m_f2, series="ARIMA", PI=FALSE) +
autolayer(arima_f2, series="AUTO.ARIMA", PI=FALSE) +
autolayer(hw_f2, series="HW", PI=FALSE) +
autolayer(ets_f2, series="ETS", PI=FALSE) +
xlab("Year") + ylab("$ Dollars") +
ggtitle("Forecasts for TUP")
c(ARIMA = accuracy(m_f2, tup_ts)["Test set","MAPE"],
AUTO.ARIMA = accuracy(arima_f2, tup_ts)["Test set","MAPE"],
HW = accuracy(hw_f2, tup_ts)["Test set","MAPE"],
EST = accuracy(ets_f2, tup_ts)["Test set","MAPE"])
sp500_train <- window(sp500_ts, end = c(2021, 9))
m3 <-  Arima(sp500_train, order = c(5, 1, 4))
arima3 <- auto.arima(sp500_train)
hw3 <- HoltWinters(sp500_train)
ets3 <- ets(sp500_train)
m_f3 <- forecast(m3, h = 12)
arima_f3 <- forecast(arima3, h = 12)
hw_f3 <- forecast(hw3, h = 12)
ets_f3 <- forecast(ets3, h = 12)
autoplot(sp500_ts) +
autolayer(m_f3, series="ARIMA", PI=FALSE) +
autolayer(arima_f3, series="AUTO.ARIMA", PI=FALSE) +
autolayer(hw_f3, series="HW", PI=FALSE) +
autolayer(ets_f3, series="ETS", PI=FALSE) +
xlab("Year") + ylab("$ Dollars") +
ggtitle("Forecasts for S&P500")
c(ARIMA = accuracy(m_f3, sp500_ts)["Test set","MAPE"],
AUTO.ARIMA = accuracy(arima_f3, sp500_ts)["Test set","MAPE"],
HW = accuracy(hw_f3, sp500_ts)["Test set","MAPE"],
EST = accuracy(ets_f3, sp500_ts)["Test set","MAPE"])
combo1 <- (m_f1[["mean"]] + arima_f1[["mean"]] +
hw_f1[["mean"]] + ets_f1[["mean"]])/4
c(ARIMA = accuracy(m_f1, snbr_ts)["Test set","MAPE"],
AUTO.ARIMA = accuracy(arima_f1, snbr_ts)["Test set","MAPE"],
HW = accuracy(hw_f1, snbr_ts)["Test set","MAPE"],
EST = accuracy(ets_f1, snbr_ts)["Test set","MAPE"],
COMBINE = accuracy(combo1, snbr_ts)["Test set","MAPE"])
combo2 <- (m_f2[["mean"]] + arima_f2[["mean"]] +
hw_f2[["mean"]] + ets_f2[["mean"]])/4
c(ARIMA = accuracy(m_f2, tup_ts)["Test set","MAPE"],
AUTO.ARIMA = accuracy(arima_f2, tup_ts)["Test set","MAPE"],
HW = accuracy(hw_f2, tup_ts)["Test set","MAPE"],
EST = accuracy(ets_f2, tup_ts)["Test set","MAPE"],
COMBINE = accuracy(combo2, tup_ts)["Test set","MAPE"])
combo3 <- (m_f3[["mean"]] + arima_f3[["mean"]] +
hw_f3[["mean"]] + ets_f3[["mean"]])/4
c(ARIMA = accuracy(m_f3, sp500_ts)["Test set","MAPE"],
AUTO.ARIMA = accuracy(arima_f3, sp500_ts)["Test set","MAPE"],
HW = accuracy(hw_f3, sp500_ts)["Test set","MAPE"],
EST = accuracy(ets_f3, sp500_ts)["Test set","MAPE"],
COMBINE = accuracy(combo3, sp500_ts)["Test set","MAPE"])
ccf(snbr_ts,tup_ts,ylab="Cross-Correlation Function", main = "SNBR and TUP CCF")
y=cbind(snbr_ts, tup_ts)
y_tot=data.frame(y)
VARselect(y_tot, lag.max = 10)
VARselect(y_tot, lag.max = 5)
y_model=VAR(y_tot,p=3)
y_model2=VAR(y_tot,p=7)
summary(y_model2)
summary(y_model)
irf(y_model2)
plot(irf(y_model2, n.ahead=36))
