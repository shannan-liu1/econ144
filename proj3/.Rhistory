reg_nnar_fit <- ts(reg_nnar_btc$fitted,frequency = 365, start = c(2016,1))
autoplot(btc_ts, series="BTC Returns", color="black") +
autolayer(nnar_fit, series="NNAR Model Returns") +
autolayer(reg_nnar_fit, series="LM of Returns + NNAR Model of Residuals") +
ggtitle("NNAR Model Fits for BTC Returns")
nnar_btc <- nnetar(btc_ts)
btc_eth_lm <- lm(returns$btc~returns$eth_ts)
reg_nnar_btc <- nnetar(btc_eth_lm$residuals, xreg=cbind(returns$btc_ts,returns$eth_ts))
nnar_fit <- ts(nnar_btc$fitted,frequency = 365, start = c(2016,1))
reg_nnar_fit <- ts(reg_nnar_btc$fitted,frequency = 365, start = c(2016,1))
autoplot(btc_ts, series="BTC Returns", color="black", alpha = 0.8) +
autolayer(nnar_fit, series="NNAR", alpha = 0.8) +
autolayer(reg_nnar_fit, series="Regression + NNAR", alpha = 0.8) +
ggtitle("Model Fit")
nnar_btc <- nnetar(btc_ts)
btc_eth_lm <- lm(returns$btc~returns$eth_ts)
reg_nnar_btc <- nnetar(btc_eth_lm$residuals, xreg=cbind(returns$btc_ts,returns$eth_ts))
nnar_fit <- ts(nnar_btc$fitted,frequency = 365, start = c(2016,1))
reg_nnar_fit <- ts(reg_nnar_btc$fitted,frequency = 365, start = c(2016,1))
autoplot(btc_ts, series="BTC Returns", color="black", alpha = 0.8) +
autolayer(nnar_fit, series="NNAR", alpha = 0.8) + ggtitle("Model Fit")
autoplot(btc_ts, series="BTC Returns", color="black", alpha = 0.8) +
autolayer(reg_nnar_fit, series="Regression + NNAR", alpha = 0.8) +
ggtitle("Model Fit")
nnar_btc <- nnetar(btc_ts)
btc_eth_lm <- lm(returns$btc~returns$eth_ts)
reg_nnar_btc <- nnetar(btc_eth_lm$residuals, xreg=cbind(returns$btc_ts,returns$eth_ts))
nnar_fit <- ts(nnar_btc$fitted,frequency = 365, start = c(2016,1))
reg_nnar_fit <- ts(reg_nnar_btc$fitted,frequency = 365, start = c(2016,1))
autoplot(btc_ts, series="BTC Returns", color="black", alpha = 0.9) +
autolayer(nnar_fit, series="NNAR", alpha = 0.9) + ggtitle("Model Fit")
autoplot(btc_ts, series="BTC Returns", color="black", alpha = 0.9) +
autolayer(reg_nnar_fit, series="Regression + NNAR", alpha = 0.9) +
ggtitle("Model Fit")
nnar_btc <- nnetar(btc_ts)
summary(nnar_btc)
checkresiduals(nnar_btc, main="Residuals from NNETAR Model of BTC Returns")
checkresiduals(reg_nnar_btc$residuals, main="Residuals from Linear Model with NNETAR Model of Residuals")
checkresiduals(nnar_btc, main="Residuals from NNETAR Model of BTC Returns")
checkresiduals(reg_nnar_btc$residuals, main="Residuals from Linear Model with NNETAR Model of Residuals")
ggtsdisplay(resid(nnar_btc),main = "NNAR Residuals", ylab = "Percentage")
ggtsdisplay(resid(reg_nnar_btc),main = "Regression + NNAR Residuals", ylab = "Percentage")
ggtsdisplay(resid(nnar_btc),main = "NNAR Residuals", ylab = "Percentage")
ggtsdisplay(resid(reg_nnar_btc),main = "Regression + NNAR Residuals", ylab = "Percentage")
plot_resid_fit(fitted(nnar_btc),resid(nnar_btc),"NNAR")
plot_resid_fit(fitted(reg_nnar_btc),resid(reg_nnar_btc),"Regression + NNAR")
plot_resid_fit(fitted(nnar_btc),resid(nnar_btc),"NNAR")
plot_resid_fit(fitted(reg_nnar_btc),resid(reg_nnar_btc),"Regression + NNAR")
par(mfrow=c(1,2))
y = recresid(nnar_btc$res ~ 1)
plot(y, pch = 16, main = "NNAR  Residuals", ylab = "Recursive Residuals")
plot(efp(nnar_btc$residuals~1, type = "Rec-CUSUM"))
par(mfrow=c(1,2))
y = recresid(reg_nnar_btc$res ~ 1)
plot(y, pch = 16, main = "Regression + NNAR Residuals", ylab = "Recursive Residuals")
plot(efp(reg_nnar_btc$residuals~1, type = "Rec-CUSUM"))
library(prophet)
preds_btc <- prophet(df_r_btc,daily.seasonality=TRUE)
df_r_btc <- data.frame(ds = btc$timestamp, y = as.numeric(btc$returns))
df_r_btc <- data.frame(ds = btc$timestamp, y = as.numeric(btc$returns))
preds_btc <- prophet(df_r_btc,daily.seasonality=TRUE)
future_btc <- make_future_dataframe(preds_btc, periods = 60)
forecast_btc <- predict(preds_btc, future_btc)
forecast_btc <- predict(preds_btc, future_btc)
plot(preds_btc,
forecast_btc,
main="BTC Returns",
ylab = "Percentage",
xlab = "Time")
plot(preds_btc,
forecast_btc,
main="BTC Returns",
ylab = "Percentage",
xlab = "Time")
prophet_plot_components()
prophet_plot_components(preds_btc)
prophet_plot_components(future_btc)
prophet_plot_components(forecast_btc)
prophet_plot_components(preds_btc, forecast_btc)
plot_cross_validation_metric()
summary(preds_btc)
autoplot(btc_ts, series="BTC Returns", color="black", alpha = 0.9) +
autolayer(preds_btc, series="Regression + NNAR", alpha = 0.9) +
ggtitle("Model Fit")
ggtsdisplay(resid(preds_btc),main = "NNAR Residuals", ylab = "Percentage")
prophet <- prophet(btc_ts ~ season(period = 4, order = 2,
prophet <- prophet(btc_ts ~ season(period = 4, order = 2, type = "multiplicative")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tseries)
library(forecast)
library(stats)
library(stats4)
library(TSA)
library(timeSeries)
library(fUnitRoots)
library(fBasics)
library(tseries)
library(timsac)
library(TTR)
library(strucchange)
library(tis)
library(zoo)
library(gridExtra)
library(crypto2)
library(ggplot2)
library(PerformanceAnalytics)
library(tibble)
library(vars)
library(MLmetrics)
library(ggplot2)
library(GGally)
library(lubridate)
library(dplyr)
library(prophet)
library(fable.prophet)
library(MAPA)
train <- window(btc_ts, end=c(2020,365))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(tseries)
library(forecast)
library(stats)
library(stats4)
library(TSA)
library(timeSeries)
library(fUnitRoots)
library(fBasics)
library(tseries)
library(timsac)
library(TTR)
library(strucchange)
library(tis)
library(zoo)
library(gridExtra)
library(crypto2)
library(ggplot2)
library(PerformanceAnalytics)
library(tibble)
library(vars)
library(MLmetrics)
library(ggplot2)
library(GGally)
library(lubridate)
library(dplyr)
library(prophet)
library(fable.prophet)
library(MAPA)
# import data
cl <- crypto_list(only_active=TRUE) %>%
filter(first_historical_data<="2015-12-31",
last_historical_data>="2022-03-03")
cl_final <- rbind(filter(cl,cl$slug=="bitcoin"),
filter(cl,cl$slug=="ethereum"),
filter(cl,cl$slug=="xrp"),
filter(cl,cl$slug=="tether"))
coins <- crypto_history(coin_list = cl_final,
start_date = "20151231", interval="daily")
relevant_vars <- c("timestamp","close","volume",
"open","high","low","market_cap")
# create separate dfs for each variable
btc <- filter(coins[relevant_vars],coins$slug=="bitcoin")
btc_monthly <- filter(coins[relevant_vars],coins$slug=="bitcoin")
eth <- filter(coins[relevant_vars],coins$slug=="ethereum")
eth_monthly <- filter(coins[relevant_vars],coins$slug=="ethereum")
usdt <- filter(coins[relevant_vars],coins$slug=="tether")
usdt_monthly <- filter(coins[relevant_vars],coins$slug=="tether")
xrp <- filter(coins[relevant_vars],coins$slug=="xrp")
xrp_monthly <- filter(coins[relevant_vars],coins$slug=="xrp")
# subset by monthly
btc_monthly$timestamp <- floor_date(btc_monthly$timestamp, "monthly")
eth_monthly$timestamp <- floor_date(eth_monthly$timestamp, "monthly")
usdt_monthly$timestamp <- floor_date(usdt_monthly$timestamp, "monthly")
xrp_monthly$timestamp <- floor_date(xrp_monthly$timestamp, "monthly")
btc_monthly <- btc_monthly %>%
group_by(timestamp) %>% summarize(close = mean(close))
eth_monthly <- eth_monthly %>%
group_by(timestamp) %>% summarize(close = mean(close))
usdt_monthly <- usdt_monthly %>%
group_by(timestamp) %>% summarize(close = mean(close))
xrp_monthly <- xrp_monthly %>%
group_by(timestamp) %>% summarize(close = mean(close))
# convert POSIXct to date time
btc$timestamp <- as.Date(btc$timestamp)
eth$timestamp <- as.Date(eth$timestamp)
usdt$timestamp <- as.Date(usdt$timestamp)
xrp$timestamp <- as.Date(xrp$timestamp)
btc_monthly$timestamp <- as.Date(btc_monthly$timestamp)
eth_monthly$timestamp <- as.Date(eth_monthly$timestamp)
usdt_monthly$timestamp <- as.Date(usdt_monthly$timestamp)
xrp_monthly$timestamp <- as.Date(xrp_monthly$timestamp)
# create returns column
btc$returns <- c(NA,diff(log(btc$close)))
eth$returns <- c(NA,diff(log(eth$close)))
usdt$returns <- c(NA,diff(log(usdt$close)))
xrp$returns <- c(NA,diff(log(xrp$close)))
btc_monthly$returns <- c(NA,diff(log(btc_monthly$close)))
eth_monthly$returns <- c(NA,diff(log(eth_monthly$close)))
usdt_monthly$returns <- c(NA,diff(log(usdt_monthly$close)))
xrp_monthly$returns <- c(NA,diff(log(xrp_monthly$close)))
# remove NAs
btc <- na.omit(btc)
eth <- na.omit(eth)
usdt <- na.omit(usdt)
xrp <- na.omit(xrp)
btc_monthly <- na.omit(btc_monthly)
eth_monthly <- na.omit(eth_monthly)
usdt_monthly <- na.omit(usdt_monthly)
xrp_monthly <- na.omit(xrp_monthly)
btc_ts <- ts(btc$returns, frequency = 365, start = c(2016,1))
eth_ts <- ts(eth$returns, frequency = 365, start = c(2016,1))
usdt_ts <- ts(usdt$returns, frequency = 365, start = c(2016,1))
xrp_ts <- ts(xrp$returns, frequency = 365, start = c(2016,1))
btc_ts2 <- ts(btc_monthly$returns, frequency = 12, start = c(2016,1))
eth_ts2 <- ts(eth_monthly$returns, frequency = 12, start = c(2016,1))
usdt_ts2 <- ts(usdt_monthly$returns, frequency = 12, start = c(2016,1))
xrp_ts2 <- ts(xrp_monthly$returns, frequency = 12, start = c(2016,1))
# plot returns together together
returns <- data.frame(btc_ts,eth_ts,usdt_ts,xrp_ts)
rownames(returns) <- btc$timestamp
chart.TimeSeries(returns, legend.loc="bottom",
main="Daily Returns of BTC, ETH, USDT,XRP",)
library(glue)
tsplot <- function(y,series_name) {
ax1 = autoplot(y, main = sprintf("%s Returns",series_name),
ylab = "Percentage (%)",xlab = "Time")
`Closing Price` = y
ax2 = gghistogram(`Closing Price`) + ggtitle("Histogram")
ax3 = ggAcf(y, main = glue('{series_name} Autocorrelations'),
xlab="Lag",lag.max = 48)
ax4 = ggPacf(y, main = glue('{series_name} Partial Autocorrelations'),
xlab="Lag",lag.max = 48)
grid.arrange(ax1,ax2,ax3,ax4,ncol=2,nrow = 2)
}
tsplot(btc_ts,"BTC")
tsplot(eth_ts,"ETH")
tsplot(usdt_ts,"USDT")
tsplot(xrp_ts,"XRP")
tsplot(btc_ts^2,"BTC^2")
tsplot(abs(btc_ts),"Absolute Value of BTC")
ret_data <- data.frame(btc$returns,eth$returns,usdt$returns,xrp$returns)
ggpairs(ret_data)
# how much do BTC's returns correlate with  its own data
self_data <- data.frame(btc$returns,btc$volume,btc$open,btc$low,
btc$high,btc$close,btc$market_cap)
ggcorr(self_data)
# BTC returns and ETH data
eth_data <- data.frame(btc$returns,eth$volume,eth$open,eth$low,eth$high,
eth$close,eth$market_cap,eth$returns)
ggcorr(eth_data)
# BTC returns and USDT data
usdt_data <- data.frame(btc$returns,usdt$volume,usdt$open,usdt$low,usdt$high,
usdt$close,usdt$market_cap,usdt$returns)
ggcorr(usdt_data)
# BTC returns and ETH data
xrp_data <- data.frame(btc$returns,xrp$volume,xrp$open,xrp$low,xrp$high,
xrp$close,xrp$market_cap,xrp$returns)
ggcorr(xrp_data)
autoplot(stl(btc_ts,s.window = "periodic",robust=TRUE),
main = "BTC STL Decomposition")
arima_btc <- auto.arima(btc_ts)
summary(arima_btc)
btc_tib <- as_tibble(btc)
reg_arima_btc <- auto.arima(btc_tib[,"returns"], xreg=cbind(eth$returns,xrp$returns))
summary(reg_arima_btc)
arima_fit <- ts(arima_btc$fitted,frequency = 365, start = c(2016,1))
reg_arima_fit <- ts(reg_arima_btc$fitted,frequency = 365, start = c(2016,1))
autoplot(btc_ts, series="BTC Series", col="black", alpha = 0.9) + ggtitle("Model Fit") +
autolayer(reg_arima_fit, series="Regression + Arima", alpha = 0.9) +
autolayer(arima_fit, series="Arima") +
ylab("Return") + xlab("Year")
ggtsdisplay(resid(arima_btc),main = "ARIMA Residuals", ylab = "Percentage")
ggtsdisplay(resid(reg_arima_btc), main = "Regression + ARIMA Residuals", ylab = "Percentage")
plot_resid_fit <- function(x,y,title) {
data = data.frame(x = x, y = y)
ggplot(data, aes(x =  x, y = y)) +
geom_smooth(method = "lm", se=T, col = "red",
formula = y ~ x, show.legend = T) +
scale_x_continuous() + scale_y_continuous() +
geom_point(alpha = 0.5,size = 2, col = "black") +
xlab("Fit") + ylab("Residuals") +
ggtitle(glue("{title} Residuals vs Fit"))
}
plot_resid_fit(fitted(arima_btc),resid(arima_btc),"ARIMA")
plot_resid_fit(fitted(reg_arima_btc),resid(reg_arima_btc),"Regression + ARIMA")
par(mfrow=c(1,2))
y = recresid(arima_btc$res ~ 1)
plot(y, pch = 16, main = "ARIMA", ylab = "Recursive Residuals")
plot(efp(arima_btc$residuals~1, type = "Rec-CUSUM"))
par(mfrow=c(1,2))
y = recresid(reg_arima_btc$res ~ 1)
plot(y, pch = 16, main = "Regression + ARIMA", ylab = "Recursive Residuals")
plot(efp(reg_arima_btc$residuals~1, type = "Rec-CUSUM"))
ets_btc <- ets(btc_ts2)
summary(ets_btc)
btc_eth_lm <- lm(btc_monthly$returns~eth_monthly$returns)
btc_lm_res_ts <- ts(btc_eth_lm$residuals,freq=12,start=c(2016,1))
reg_ets_btc <- ets(btc_lm_res_ts)
summary(reg_ets_btc)
autoplot(btc_ts2, series="BTC Series", col="black") + ggtitle("Model Fit") +
autolayer(ets_btc$fitted, series="ETS") +
autolayer(reg_ets_btc$fitted, series="Regression + ETS") +
ylab("Return") + xlab("Year")
ggtsdisplay(resid(ets_btc),main = "ETS Residuals", ylab = "Percentage")
ggtsdisplay(resid(reg_ets_btc),main = "Regression + ETS Residuals", ylab = "Percentage")
plot_resid_fit(fitted(ets_btc),resid(ets_btc),"ETS")
plot_resid_fit(fitted(reg_ets_btc),resid(reg_ets_btc),"Regression + ETS")
par(mfrow=c(1,2))
y = recresid(ets_btc$res ~ 1)
plot(y, pch = 16, main = "ETS", ylab = "Recursive Residuals")
plot(efp(ets_btc$residuals~1, type = "Rec-CUSUM"))
par(mfrow=c(1,2))
y = recresid(reg_ets_btc$res ~ 1)
plot(y, pch = 16, main = "Regression + ETS", ylab = "Recursive Residuals")
plot(efp(reg_ets_btc$residuals~1, type = "Rec-CUSUM"))
hw_btc <- hw(btc_ts2,seasonal=c("additive"))
summary(hw_btc)
reg_hw_btc <- hw(btc_lm_res_ts,seasonal=c("additive"))
summary(reg_ets_btc)
autoplot(btc_ts2, series="BTC Series", col="black") + ggtitle("Model Fit") +
autolayer(hw_btc$fitted, series="HW") +
autolayer(reg_hw_btc$fitted, series="Regression + HW") +
ylab("Return") + xlab("Year")
ggtsdisplay(resid(hw_btc),main = "HW Residuals", ylab = "Percentage")
ggtsdisplay(resid(reg_hw_btc),main = "Regression + HW Residuals", ylab = "Percentage")
plot_resid_fit(fitted(hw_btc),resid(hw_btc),"HW")
plot_resid_fit(fitted(reg_hw_btc),resid(reg_hw_btc),"Regression + HW")
par(mfrow=c(1,2))
y = recresid(hw_btc$res ~ 1)
plot(y, pch = 16, main = "HW  Residuals", ylab = "Recursive Residuals")
plot(efp(hw_btc$residuals~1, type = "Rec-CUSUM"))
par(mfrow=c(1,2))
y = recresid(reg_hw_btc$res ~ 1)
plot(y, pch = 16, main = "Regression + HW Residuals", ylab = "Recursive Residuals")
plot(efp(reg_hw_btc$residuals~1, type = "Rec-CUSUM"))
nnar_btc <- nnetar(btc_ts)
btc_eth_lm <- lm(returns$btc~returns$eth_ts)
reg_nnar_btc <- nnetar(btc_eth_lm$residuals, xreg=cbind(returns$btc_ts,returns$eth_ts))
nnar_fit <- ts(nnar_btc$fitted,frequency = 365, start = c(2016,1))
reg_nnar_fit <- ts(reg_nnar_btc$fitted,frequency = 365, start = c(2016,1))
autoplot(btc_ts, series="BTC Returns", color="black", alpha = 0.9) +
autolayer(nnar_fit, series="NNAR", alpha = 0.9) + ggtitle("Model Fit")
autoplot(btc_ts, series="BTC Returns", color="black", alpha = 0.9) +
autolayer(reg_nnar_fit, series="Regression + NNAR", alpha = 0.9) +
ggtitle("Model Fit")
ggtsdisplay(resid(nnar_btc),main = "NNAR Residuals", ylab = "Percentage")
ggtsdisplay(resid(reg_nnar_btc),main = "Regression + NNAR Residuals", ylab = "Percentage")
plot_resid_fit(fitted(nnar_btc),resid(nnar_btc),"NNAR")
plot_resid_fit(fitted(reg_nnar_btc),resid(reg_nnar_btc),"Regression + NNAR")
par(mfrow=c(1,2))
y = recresid(nnar_btc$res ~ 1)
plot(y, pch = 16, main = "NNAR  Residuals", ylab = "Recursive Residuals")
plot(efp(nnar_btc$residuals~1, type = "Rec-CUSUM"))
par(mfrow=c(1,2))
y = recresid(reg_nnar_btc$res ~ 1)
plot(y, pch = 16, main = "Regression + NNAR Residuals", ylab = "Recursive Residuals")
plot(efp(reg_nnar_btc$residuals~1, type = "Rec-CUSUM"))
mapa_fit <- mapaest(btc_ts2,outplot=2, paral=2,type="es")
mapa_for <- mapa(btc_ts2,conf.lvl=c(0.8,0.9,0.95,0.99),outplot=1)
df_r_btc <- data.frame(ds = btc$timestamp, y = as.numeric(btc$returns))
preds_btc <- prophet::prophet(df_r_btc,daily.seasonality=TRUE)
future_btc <- prophet::make_future_dataframe(preds_btc, periods = 60)
forecast_btc <- predict(preds_btc, future_btc)
plot(preds_btc, forecast_btc, main="BTC Returns",
ylab = "Percentage", xlab = "Year")
prophet_plot_components(preds_btc, forecast_btc)
res <- forecast_btc$yhat - df_r_btc$y
ggtsdisplay(res, main = "Prophet Residuals", ylab = "Percentage")
plot_resid_fit(forecast_btc$yhat,res,"Prophet")
par(mfrow=c(1,2))
y = recresid(res ~ 1)
plot(y, pch = 16, main = "Prophet", ylab = "Recursive Residuals")
plot(efp(res~1, type = "Rec-CUSUM"))
train <- window(btc_ts, end=c(2020,365))
train_eth <- window(eth_ts, end=c(2020,365))
train_xrp <- window(xrp_ts, end=c(2020,365))
test <- window(btc_ts, start=c(2021,1), end=c(2021,365))
train2 <- window(btc_ts2, end=c(2020,12))
train_eth2 <- window(eth_ts2, end=c(2020,12))
train_xrp2 <- window(xrp_ts2, end=c(2020,12))
test2 <- window(btc_ts2, start=c(2021,1), end=c(2021,12))
btc_train <- as_tibble(btc) %>% filter(timestamp < "2021-01-01")
eth_train <- eth %>% filter(timestamp < "2021-01-01")
xrp_train <- xrp %>% filter(timestamp < "2021-01-01")
btc_test <- as_tibble(btc) %>% filter(timestamp >= "2021-01-01") %>% filter(timestamp < "2022-01-01")
eth_test <- as_tibble(eth) %>% filter(timestamp >= "2021-01-01") %>% filter(timestamp < "2022-01-01")
xrp_test <- as_tibble(xrp) %>% filter(timestamp >= "2021-01-01") %>% filter(timestamp < "2022-01-01")
btc_train2 <- as_tibble(btc_monthly) %>% filter(timestamp < "2021-01-01")
eth_train2 <- eth_monthly %>% filter(timestamp < "2021-01-01")
xrp_train2 <- xrp_monthly %>% filter(timestamp < "2021-01-01")
btc_test2 <- as_tibble(btc_monthly) %>% filter(timestamp >= "2021-01-01") %>% filter(timestamp < "2022-01-01")
eth_test2 <- as_tibble(eth_monthly) %>% filter(timestamp >= "2021-01-01") %>% filter(timestamp < "2022-01-01")
xrp_test2 <- as_tibble(xrp_monthly) %>% filter(timestamp >= "2021-01-01") %>% filter(timestamp < "2022-01-01")
eth_train$returns <- c(NA,diff(log(eth_train$close)))
eth_test$returns <- c(NA,diff(log(eth_test$close)))
eth_train <- na.omit(eth_train)
eth_test <- na.omit(eth_test)
eth_train2$returns <- c(NA,diff(log(eth_train2$close)))
eth_test2$returns <- c(NA,diff(log(eth_test2$close)))
xrp_train2$returns <- c(NA,diff(log(xrp_train2$close)))
xrp_test2$returns <- c(NA,diff(log(xrp_test2$close)))
btc_train2 <- na.omit(btc_train2)
eth_train2 <- na.omit(eth_train2)
xrp_train2 <- na.omit(xrp_train2)
btc_test2 <- na.omit(btc_test2)
eth_test2 <- na.omit(eth_test2)
xrp_test2 <- na.omit(xrp_test2)
btc_train2 <- btc_train2[2:nrow(btc_train2),]
eth_monthly$returns <- c(NA,diff(log(eth_monthly$close)))
usdt_monthly$returns <- c(NA,diff(log(usdt_monthly$close)))
xrp_monthly$returns <- c(NA,diff(log(xrp_monthly$close)))
h <- length(test)
h2 <- length(test2)
ARIMA_mod <- Arima(btc_train[,"returns"], order=c(0,0,1), xreg=cbind(eth_train$returns,xrp_train$returns))
ARIMA_for <- predict(ARIMA_mod, newxreg=cbind(eth_test$returns,xrp_test$returns))
ARIMA <- ts(ARIMA_for$pred, start=c(2021,1), freq=365)
MAPE(ARIMA, btc_test$returns)
ETS_mod <- ets(train2)
ETS_for <- predict(ETS_mod, h=h2)
ETS <- ts(ETS_for$mean, start=c(2021,1), freq=12)
MAPE(ETS, test2)
btc_eth_lm <- lm(btc_train2$returns~eth_train2$returns)
btc_lm_res_ts <- ts(btc_eth_lm$residuals,freq=12,start=c(2016,2))
HW_mod <- hw(btc_lm_res_ts,seasonal=c("additive"))
HW_for <- predict(HW_mod, h=h2)
HW <- ts(HW_for$mean, start=c(2021,1), freq=12)
MAPE(HW, test2)
btc_train <- btc_train[2:nrow(btc_train),]
btc_eth_lm <- lm(btc_train$returns~eth_train$returns)
NNAR_mod <- nnetar(btc_eth_lm$residuals, xreg=cbind(btc_train$returns,eth_train$returns))
NNAR_for <- predict(NNAR_mod, xreg=cbind(btc_test$returns,eth_test$returns))
NNAR <- ts(NNAR_for$mean, start=c(2021,1), freq=365)
MAPE(NNAR, test)
MAPA_for <- mapa(train2,conf.lvl=c(0.8,0.9,0.95,0.99),outplot=1)
MAPA <- ts(MAPA_for$outfor, start=c(2021,1), frequency=12)
MAPE(MAPA, test2)
df_r_btc <- data.frame(ds = btc_train$timestamp, y = as.numeric(btc_train$returns))
preds_btc <- prophet::prophet(df_r_btc,daily.seasonality=TRUE)
future_btc <- prophet::make_future_dataframe(preds_btc, periods = 365)
pred_btc <- predict(preds_btc, future_btc)
PRO_for <- pred_btc[1826:nrow(pred_btc),]
PRO <- ts(PRO_for$yhat, start=c(2021,1), freq=365)
MAPE(PRO, test)
HIGH_COMBO <- (ARIMA + PRO + NNAR) / 3
MAPE(HIGH_COMBO, test)
LOW_COMBO <- (MAPA + HW + ETS) / 3
MAPE(LOW_COMBO, test2)
autoplot(train) + autolayer(test, series="Actual", color="Black") +
autolayer(ARIMA, series="ARIMA", alpha=0.5) +
autolayer(PRO, series="PRO", alpha=0.5) +
autolayer(NNAR, series="NNAR", alpha=0.5) +
autolayer(HIGH_COMBO, series="COMBO", alpha=0.5) +
xlim(c(2020,2022)) + ylim(c(-0.25,0.25)) +
ylab("Percent") + xlab("Year") + ggtitle("High Frequency Models")
autoplot(train2) + autolayer(test2, series="Actual", color="Black") +
autolayer(MAPA, series="MAPA", alpha=0.5) +
autolayer(HW, series="HW", alpha=0.5) +
autolayer(ETS, series="ETS", alpha=0.5) +
autolayer(LOW_COMBO, series="COMBO", alpha=0.5) +
xlim(c(2018,2022)) + ylim(c(-0.5,0.5)) +
ylab("Percent") + xlab("Year") + ggtitle("Low Frequency Models")
ccf(btc_ts, eth_ts, ylab = "Cross-Correlation Function", main = "BTC and ETH CCF")
y_btc_eth = cbind(btc_ts, eth_ts)
y_tot_btc_eth = data.frame(y_btc_eth)
VARselect(y_tot_btc_eth, lag.max = 10)
vmod_btc_eth=VAR(y_btc_eth,p=4)
summary(vmod_btc_eth)
vmod_btc_eth$varresult$btc_ts
tsdisplay(vmod_btc_eth$varresult$btc_ts$residuals)
vmod_eth_ts = ts(vmod_btc_eth$varresult$btc_ts$fitted.values,start=c(2016,1),freq=365)
plot(btc_ts,col="black",lwd=1,lty=1,main="BTC Returns and Fitted Values from BTC,ETH VAR Model")
lines(vmod_eth_ts,col="red",lty=2)
legend("bottomleft",legend=c("BTC","VAR"),text.col=1:4,bty = "o")
par(mfrow=c(1,2))
y = recresid(vmod_btc_eth$varresult$btc_ts$residuals ~ 1)
plot(y, pch = 16, main = "HW  Residuals", ylab = "Recursive Residuals")
plot(efp(vmod_btc_eth$varresult$btc_ts$residuals~1, type = "Rec-CUSUM"))
ccf(btc_ts,xrp_ts,ylab="Cross-Correlation Function", main = "BTC and XRP CCF")
y_btc_xrp=cbind(btc_ts,xrp_ts)
y_tot_btc_xrp=data.frame(y_btc_xrp)
VARselect(y_btc_xrp, lag.max=10)
vmod_btc_xrp=VAR(y_btc_xrp,p=2)
summary(vmod_btc_xrp)
vmod_btc_xrp$varresult$btc_ts
tsdisplay(vmod_btc_xrp$varresult$btc_ts$residuals)
vmod_xrp_ts = ts(vmod_btc_xrp$varresult$btc_ts$fitted.values, start=c(2016,1),freq=365)
plot(btc_ts,col="black",lwd=1,lty=1,main="BTC Returns and Fitted Values from BTC,XRP VAR Model")
lines(vmod_xrp_ts,col="red",lty=2)
legend("bottomleft",legend=c("BTC","VAR"),text.col=1:4,bty = "o")
par(mfrow=c(1,2))
y = recresid(vmod_btc_xrp$varresult$btc_ts$residuals ~ 1)
plot(y, pch = 16, main = "HW  Residuals", ylab = "Recursive Residuals")
plot(efp(vmod_btc_xrp$varresult$btc_ts$residuals~1, type = "Rec-CUSUM"))
#Train and test ETH VAR Model
btc.train <- window(btc_ts, end=c(2021,1))
eth.train <- window(eth_ts, end=c(2021,1))
y.eth.train=cbind(btc.train,eth.train)
y_eth_train=data.frame(y.eth.train)
vmod.eth.train=VAR(y_eth_train,p=4)
vmod.eth.train.pred=predict(object=vmod.eth.train, n.ahead=12)
#Train and test XRP VAR Model
xrp.train <- window(xrp_ts, end=c(2021,1))
y.xrp.train=cbind(btc.train,xrp.train)
y_xrp_train=data.frame(y.xrp.train)
vmod.xrp.train=VAR(y_xrp_train,p=2)
vmod.xrp.train.pred=predict(object=vmod.xrp.train, n.ahead=12)
#Compare MAPEs
MAPE(vmod.eth.train.pred$model$varresult$btc.train$fitted.values, y_eth_train$btc.train[1:1822])
MAPE(vmod.xrp.train.pred$model$varresult$btc.train$fitted.values, y_xrp_train$btc.train[1:1824])
vmod.pred <- predict(object=vmod_btc_eth, n.ahead=12)
plot(vmod.pred, xlim=c(2000,2275))
MAPE(LOW_COMBO, test2)
